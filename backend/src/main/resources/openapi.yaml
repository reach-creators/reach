openapi: 3.0.0

info:
  title: Reach Backend API
  version: 0.0.1-SNAPSHOT
  description: |
    This is the API specification for the endpoints included in the Reach web app backend.

security:
  - bearerAuth: []

paths:
  /health:
    get:
      tags:
        - Health
      summary: Ping backend health
      description: Call this endpoint to check if the backend is up and running.
      operationId: checkHealth
      responses:
        '200':
          description: Backend is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloWorld'
        '401':
          description: Health error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloWorldError'
        '500':
          description: Internal server error
  /signup:
    post:
      tags:
        - Auth
      summary: Sign up user
      description: Creates and authenticates a new user with a given role
      operationId: signupAuth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      responses:
        '200':
          description: User and token created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '500':
          description: Internal server error
  /login:
    post:
      tags:
        - Auth
      summary: Login user
      description: Returns the token of an authenticated user
      operationId: loginAuth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: User and token created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '403':
          description: Invalid login credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          description: Internal server error

  /brands:
    get:
      tags:
        - Brand
      summary: Get all brands (paginated summary)
      description: Retrieves a paginated list of brand summaries.
      operationId: getAllBrands
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: The page number to retrieve.
        - in: query
          name: size
          schema:
            type: integer
            default: 30
          description: The number of items per page.
      responses:
        '200':
          description: A paginated list of brand summaries.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandSummaryPage'
    post:
      tags:
        - Brand
      summary: Add a new Brand
      description: Add a new Brand to the database
      operationId: createBrand
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Brand'
      responses:
        '201':
          description: Brand successfully added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Brand'
    put:
      tags:
        - Brand
      summary: Update an existing Brand
      description: "Update an existing Brand in the database. Note: The brand ID should be in the request body."
      operationId: updateBrand
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Brand'
      responses:
        '204':
          description: Brand successfully updated
        '404':
          description: Brand to be updated not found

  /brands/{id}:
    get:
      tags:
        - Brand
      summary: Get an existing Brand
      description: Get an existing Brand by its id
      operationId: getBrand
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the brand to retrieve
      responses:
        '200':
          description: Brand successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Brand'
        '404':
          description: Brand not found

  /creators:
    get:
      tags:
        - Creator
      summary: Get all creators (paginated summary)
      description: Retrieves a paginated list of creator summaries.
      operationId: getAllCreators
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: The page number to retrieve.
        - in: query
          name: size
          schema:
            type: integer
            default: 30
          description: The number of items per page.
      responses:
        '200':
          description: A paginated list of creator summaries.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatorSummaryPage'
    post:
      tags:
        - Creator
      summary: Create a new creator
      description: Creates a new creator with the given details.
      operationId: createCreator
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Creator'
      responses:
        '201':
          description: Creator successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Creator'
        '400':
          description: Invalid input
    put:
      tags:
        - Creator
      summary: Update an existing creator
      description: "Update an existing creator in the database. Note: The creator ID should be in the request body."
      operationId: updateCreator
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Creator'
      responses:
        '204':
          description: Creator updated
        '404':
          description: Creator not found

  /creators/{id}:
    get:
      tags:
        - Creator
      summary: Get creator by ID
      operationId: getCreator
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Creator found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Creator'
        '404':
          description: Creator not found

components:
  securitySchemes:
    bearerAuth: # This name must match what you use in 'security'
      type: http
      scheme: bearer
      bearerFormat: JWT # Optional: for documentation only
  schemas:
    HelloWorld:
      type: object
      description: Default health response
      properties:
        message:
          type: string
        timestamp:
          type: string
          format: date-time

    HelloWorldError:
      type: object
      description: Health error
      properties:
        error:
          type: string
        randomNumber:
          type: number

    SignupRequest:
      type: object
      description: Creates new user authentication
      properties:
        email:
          type: string
        password:
          type: string
        role:
          enum:
            - BRAND
            - CREATOR
            - ADMIN

    LoginRequest:
      type: object
      description: Request token for existing user
      properties:
        email:
          type: string
        password:
          type: string

    AuthResponse:
      type: object
      description: Returns token for authenticated users
      properties:
        token:
          type: string

    Brand:
      type: object
      description: Brand created on the frontend level containing all details
      properties:
        id:
          type: integer
        name:
          type: string
        logo:
          type: string
          format: uri
        revenuePerMonth:
          type: integer
        itemsSold:
          type: integer
        averageUnitPrice:
          type: number
          format: float
        niches:
          type: array
          items:
            $ref: '#/components/schemas/Niche'
        region:
          type: string

    BrandSummary:
      type: object
      description: A summary of a brand, containing only essential information for lists.
      properties:
        name:
          type: string
        logo:
          type: string
          format: uri

    BrandSummaryPage:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/BrandSummary'
        totalPages:
          type: integer
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
        number:
          type: integer

    Creator:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        salesPerMonth:
          type: integer
        itemsSold:
          type: integer
        niches:
          type: array
          items:
            $ref: '#/components/schemas/Niche'
        region:
          type: string

    CreatorSummary:
      type: object
      description: A summary of a creator, containing only the name.
      properties:
        name:
          type: string

    CreatorSummaryPage:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/CreatorSummary'
        totalPages:
          type: integer
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
        number:
          type: integer

    Niche:
      type: string
      enum:
        - BEAUTY_AND_PERSONAL_CARE
        - HEALTH
        - NUTRITION_AND_WELLNESS
        - SPORTS_AND_OUTDOOR
        - VITAMINS_MINERALS_AND_WELLNESS_SUPPLEMENTS
        - PHONES_AND_ELECTRONICS
        - FASHION_ACCESSORIES
        - FRAGRANCE
        - SKINCARE
      description: Enum representing the niche of the creator.

    ErrorMessage:
      type: object
      properties:
        error:
          type: string